#!/bin/bash
#
# Setup for $USER@$HOSTNAME - both sudoer and root
##

NODE_VERSION=20
NVM_VERSION=v0.40.3

help () { # {{{1
	echo "help $# $@"
}

install_node () { # {{{1
  which node && return
  [ -e $HOME/.bashrc.uh.saved ] && mv $HOME/.bashrc.uh.saved $HOME/.bashrc && rm -rf $HOME/.nvm # debug/teardown
  cp $HOME/.bashrc $HOME/.bashrc.uh.saved
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/$NVM_VERSION/install.sh | bash
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
  nvm install $NODE_VERSION
  nvm use $NODE_VERSION
  [ -e /usr/local/bin/node ] || sudo ln $HOME/.nvm/versions/node/$NODE_VERSION/bin/node /usr/local/bin/node
}

run () { # {{{1
	echo "run $# $@"
  install_node
  setup_vim
  if [ "$USER" = 'root' ]; then
    which node
  else
    [ -z "$(sudo -u root cat /root/.ssh/authorized_keys)" ] && sudo cp $HOME/.ssh/authorized_keys /root/.ssh || echo '/root/.ssh/authorized_keys preserved'
    sudo -u root $0
  fi
}

setup_vim () { # {{{1
  [ -d $HOME/.vim/autoload ] && return
  [ -e $HOME/.vimrc.uh.saved ] && mv $HOME/.vimrc.uh.saved $HOME/.vimrc && rm -rf $HOME/.vim/autoload # debug/teardown
  [ -e $HOME/.vimrc ] && cp $HOME/.vimrc $HOME/.vimrc.uh.saved || touch $HOME/.vimrc.uh.saved
  cat << HD > $HOME/.vimrc # {{{2
syntax on
filetype plugin indent on

set number
set tabstop=2     " show existing tab with 2 spaces width
set shiftwidth=2  " when indenting with '>', use 2 spaces width
set expandtab     " on pressing tab, insert 2 spaces
set updatecount=0 " the writing to the swap file is not wanted
set backspace=indent,eol,start
set foldmethod=marker
set mouse-=a

" To make Vim insert a literal tab character when you press <S-Tab>:
inoremap <S-Tab> <C-V><Tab>
" Like this t2  t3 - this line holds 3 tabs

colorscheme default

" See also:
" - https://superuser.com/questions/768894/mapping-s-tab-in-vim
" - https://github.com/amix/vimrc.git
""

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

  Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
  Plug 'augmentcode/augment.vim'

call plug#end()

let g:augment_workspace_folders = ['$HOME/people/didalik']
" See also:
" https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
" https://github.com/junegunn/vim-plug?tab=readme-ov-file
" https://github.com/fatih/vim-go?tab=readme-ov-file
" https://github.com/augmentcode/augment.vim
""
HD
# }}}2
  echo -e "\n\tsetup_vim: DONE for $USER, please restart open vim sessions!\n"
}

validate () { # {{{1
	echo "validate $# $@"
  [ "$(uname)" = 'Linux' ] || {
    echo -e "\n\tERROR: invalid uname: expected 'Linux', got '$(uname)'\n"; return 1
  }
  [ "$USER" = 'root' ] || [ -e /etc/sudoers.d/$USER ] || echo "$USER  ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/$USER
  [ -z "$SSH_CLIENT" ] || echo SSH_CLIENT $SSH_CLIENT
}

echo "$0 started for $USER on $(date) in $PWD" # {{{1
validate $@ && run $@ || help $@
echo "$0 DONE for $USER"
